{"version":3,"sources":["reportWebVitals.js","Componets/Navbar.js","Componets/TextForm.js","Componets/About.js","Componets/Alert.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","props","className","mode","href","title","type","id","abouttext","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","Style","heading","class","onChange","event","console","log","target","value","style","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","nText","split","join","length","About","color","border","borderRadius","mystyle","setMyStyle","btntext","setBtnText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","querySelector","path","element","ReactDOM","render"],"mappings":"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","file":"static/js/main.50207c8a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props){\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/about\">{props.abouttext}</a>\r\n              </li>\r\n              \r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n            </div>\r\n          </div>\r\n      </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={\r\n    title: PropTypes.string.isRequired,\r\n    abouttext: PropTypes.string\r\n} \r\n\r\n// Navbar.defaultProps ={\r\n//     title: 'Title here',\r\n//     abouttext: 'About text here'\r\n// }","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const upClick = () => {\r\n        console.log(\"Uppercase button clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase\",\"success\");\r\n    }\r\n    const lowClick = () => {\r\n        console.log(\"Lowercase button clicked\" + text);\r\n        setText(text.toLowerCase())\r\n        props.showAlert(\"Converted to lowercase\",\"success\");\r\n    }\r\n    const clearClick = () => {\r\n        console.log(\"Lowercase button clicked\" + text);\r\n        setText('')\r\n        props.showAlert(\"Cleared the text\",\"success\");\r\n    }\r\n    const handleonChange = (event) => {\r\n        console.log(\"on Change action\");\r\n        setText(event.target.value)\r\n    }\r\n    const copyClick = () => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text is copied\",\"success\");\r\n    }\r\n    const extraSpace = () => {\r\n        var nText = text.split(/[ ]+/);\r\n        setText(nText.join(\" \"));\r\n        props.showAlert(\"Extra spaces in the text are removed\",\"success\");\r\n    }\r\n    const [text, setText] = useState('Enter text here');\r\n    return (\r\n        <div className=\"container\" Style={`color:${props.mode === 'dark' ? 'white' : 'black'}`} >\r\n            <h1 >{props.heading}</h1>\r\n            <div class=\"mb-3\">\r\n                <textarea className=\"form-control\" onChange={handleonChange} value={text} id=\"myBox\" style={{ backgroundColor: props.mode === 'dark' ? 'grey' : 'white' }} rows=\"10\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={upClick}>Upper-case</button>\r\n            <button className=\"btn btn-warning mx-1\" onClick={lowClick}>Lower-case</button>\r\n            <button className=\"btn btn-danger mx-1\" onClick={clearClick}>Clear</button>\r\n            <button className=\"btn btn-success mx-1\" onClick={copyClick}>Copy</button>\r\n            <button className=\"btn btn-secondary mx-1\" onClick={extraSpace}>Remove Extra Space</button>\r\n            <div className=\"container my-3\" >\r\n                <h3>Keywords in your description</h3>\r\n                <p>words:{text.split(\" \").length} and characters: {text.length}</p>\r\n                <p>{0.008 * text.split(\" \").length}Minutes</p>\r\n                <h3>Preview:</h3>\r\n                <p>{text.length > 0 ? text : \"Enter something to preview\"}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState} from 'react'\r\n\r\n\r\nexport default function About() {\r\n\r\n    const [mystyle, setMyStyle] = useState({\r\n        color:'black',\r\n        backgroundColor:'white',\r\n        border:'2px solid black',\r\n        borderRadius:'5px' \r\n    })\r\n    const [btntext, setBtnText] = useState(\"Enable Dark Mode\")\r\n    const toggleStyle=()=>{\r\n        if(mystyle.color ==='black'){\r\n            setMyStyle({\r\n                color:'white',\r\n                backgroundColor:'black',\r\n                border:'2px solid white',\r\n            })\r\n            setBtnText(\"Enable Light Mode\")\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\")\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"container\" style={mystyle}>\r\n            <h1>About us </h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={mystyle}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={mystyle}>\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={mystyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={mystyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <button type=\"button\" className=\"btn btn-dark\" onClick={toggleStyle }>{btntext}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    \r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport Navbar from './Componets/Navbar';\nimport TextForm from './Componets/TextForm';\nimport About from './Componets/About';\nimport React, { useState } from 'react';\nimport Alert from './Componets/Alert';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link\n} from \"react-router-dom\";\n \nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },2000);\n  }\n  const toggleMode=()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#042743';\n      document.querySelector('div').style.color= 'white';\n      showAlert(\"Dark Mode has been enabled\",\"success\");\n      document.title='Text-Utils:DarkMode';\n      // setInterval(()=>{\n      //   document.title='Amazing Text-Utils';\n      // },1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light Mode has been enabled\",\"success\");\n      document.title='Text-Utils:LightMode';\n    }\n  }\n  return (\n    <>\n      {/* <Navbar title=\"TextUtils\" abouttext=\"AboutTU\"/> */}\n      <Navbar title=\"TextUtil\" abouttext=\"AboutTU\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert} />\n      <div className=\"container\">\n          <Router>\n            <Routes>\n            <Route path=\"/about\" element={<About />}>\n            </Route>\n            <Route path=\"/\" element={<TextForm heading=\"Enter text to analyze\"  mode={mode} showAlert={showAlert} />}>\n            </Route>\n            </Routes>\n          </Router>\n        </div>\n    </>\n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App.js';\n\n\n// function formatDate(date){\n//   return date.toLocaleTimeString();\n// }\n// /*\n//   function Comment(props){\n//     return (\n//       <div className=\"Comment\">\n//         <div className=\"info\">\n//           <img\n//             className=\"urlltext\"\n//             src={props.author.urll}\n//             alt={props.author.name} \n//           />\n//           <div className=\"user-name\">\n//             <h1>{props.author.name}</h1>\n//           </div>\n//           <div className=\"comment-text\">\n//             {props.text}\n//           </div>\n//           <div className=\"date\">\n//             {formatDate(props.date)}\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n//   */\n// //  function Urlltext(props){\n// //    return (\n// //     <img\n// //     className=\"Urlltext\"\n// //     src={props.user.urll}\n// //     alt={props.user.name} \n// //   />\n// //    );\n// //  }\n// class Urlltext extends React.Component{\n//   render(){\n//     return(\n//       <img \n//       className=\"Urlltext\"\n//       src={this.props.user.urll}\n//       alt={this.props.user.name}\n//     />\n//     );\n//   }\n// }\n// //  function UserName(props){\n// //    return (\n// //      <div className=\"UserName\">\n// //        <Urlltext user={props.user}/>\n// //        <div className=\"UserInfo\">\n// //          {props.user.name}\n// //        </div>\n// //      </div>\n// //    );\n// //  }\n// class UserName extends React.Component{\n//   render(){\n//     return(\n//       <div className=\"UserName\">\n//         <Urlltext user={this.props.user}/>\n//         <div className=\"UserInfo\">\n//           {this.props.user.name}\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n// //  function Comment(props){\n// //    return (\n// //      <div className=\"Comment\">\n// //        <UserName user={props.author}/>\n// //        <div className=\"Comment-text\">{props.text}</div>\n// //        <div className=\"comment-date\">{formatDate(props.date)}</div>\n// //      </div>\n\n// //    );\n// //  }\n// class Comment extends React.Component{\n//   render(){\n//     return(\n//       <div className=\"Comment\">\n//         <UserName user={this.props.author}/>\n//         <div className=\"Comment-text\">{this.props.text}</div>\n//         <div className=\"comment-date\">{formatDate(this.props.date)}</div>\n//       </div>\n//     );\n//   }\n// }\n// const comment={\n//   date: new Date(),\n//   text: 'Hello vijay hope you learning ReactJs very well!!',\n//   author:{\n//     name: 'Birkur Vijay',\n//     urll: 'https://placekitten.com/g/64/64',\n//   },\n// };\n\n\n\n\n  ReactDOM.render(\n    <App />,\n    document.getElementById('root')\n  );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}